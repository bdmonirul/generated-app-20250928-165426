import { Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import type { RevenueDataPoint } from '@shared/types';
const chartData: RevenueDataPoint[] = [
  { name: 'Jan', recovered: 4000, upsold: 2400 },
  { name: 'Feb', recovered: 3000, upsold: 1398 },
  { name: 'Mar', recovered: 2000, upsold: 9800 },
  { name: 'Apr', recovered: 2780, upsold: 3908 },
  { name: 'May', recovered: 1890, upsold: 4800 },
  { name: 'Jun', recovered: 2390, upsold: 3800 },
  { name: 'Jul', recovered: 3490, upsold: 4300 },
];
export function RevenueChart() {
  return (
    <Card className="col-span-1 lg:col-span-2 xl:col-span-3">
      <CardHeader>
        <CardTitle>Revenue Overview</CardTitle>
        <CardDescription>Total revenue generated by the app this year.</CardDescription>
      </CardHeader>
      <CardContent className="pl-2 h-[350px]">
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart data={chartData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
            <defs>
              <linearGradient id="colorRecovered" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="hsl(var(--revenue))" stopOpacity={0.8} />
                <stop offset="95%" stopColor="hsl(var(--revenue))" stopOpacity={0} />
              </linearGradient>
              <linearGradient id="colorUpsold" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="hsl(var(--upsell))" stopOpacity={0.8} />
                <stop offset="95%" stopColor="hsl(var(--upsell))" stopOpacity={0} />
              </linearGradient>
            </defs>
            <XAxis
              dataKey="name"
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke="#888888"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `${Number(value) / 1000}k`}
            />
            <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
            <Tooltip
              contentStyle={{
                backgroundColor: 'hsl(var(--background))',
                border: '1px solid hsl(var(--border))',
                borderRadius: 'var(--radius)',
              }}
              formatter={(value: number) => new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value)}
            />
            <Area
              type="monotone"
              dataKey="recovered"
              stroke="hsl(var(--revenue))"
              fillOpacity={1}
              fill="url(#colorRecovered)"
              strokeWidth={2}
            />
            <Area
              type="monotone"
              dataKey="upsold"
              stroke="hsl(var(--upsell))"
              fillOpacity={1}
              fill="url(#colorUpsold)"
              strokeWidth={2}
            />
          </AreaChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}